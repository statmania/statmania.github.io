[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Stat Mania",
    "section": "",
    "text": "Spatio-temporal Analysis Workflow\n\n\n\nR\n\n\nGIS\n\n\n\nThe announcement of the clockplot package.\n\n\n\nAbdullah Al Mahmud\n\n\nSep 10, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclockplot: Plot Event Times on a 24-Hour Clock\n\n\n\nR\n\n\nclockplot\n\n\n\nThe announcement of the clockplot package.\n\n\n\nAbdullah Al Mahmud\n\n\nAug 30, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nR Package Development Workflow\n\n\n\nR\n\n\npackage\n\n\nprogramming\n\n\n\nThe Workflow that you may follow while developing your own R package.\n\n\n\nAbdullah Al Mahmud\n\n\nAug 29, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nCRAN Package Submission Checklist\n\n\n\nR\n\n\npackage\n\n\nCRAN\n\n\nsubmission\n\n\n\nA comprehensive checklist for a smooth R package submission to CRAN.\n\n\n\nAbdullah Al Mahmud\n\n\nAug 29, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCommon hyphenated and non-hyphenated compound\n\n\n\nwords\n\n\nenglish\n\n\nielts\n\n\n\n\n\n\n\nAbdullah Al Mahmud\n\n\nAug 26, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPHP dashboard from a MySQL database\n\n\n\ndashboard\n\n\ncode\n\n\nphp\n\n\n\n\n\n\n\nAbdullah Al Mahmud\n\n\nAug 23, 2025\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/clockplot.html",
    "href": "posts/clockplot.html",
    "title": "clockplot: Plot Event Times on a 24-Hour Clock",
    "section": "",
    "text": "My R package clockplot is now available on CRAN!\nThe primary goal of the clockplot is to plot event time on a clock chart. The length and color of the clock hands can be modified by certain qualitative and quantitative variables.\nAdditionally, the package can make a day chart, a week chart, or a month chart, or plan events in those periods.\nI would like everyone to visit the package website (generated automatically by pkgdown), explore the examples, and give wise advice\nTo see a quick example, see the attached plot. The plot shows times of earthquakes. Points are magnified as per magnitude. Length and color denote the depth of the epicenter. This allows us to find patterns in the event times as well as compare differences in time more easily and usefully than with other charts, such as a bar chart.\n\n\n\nclockplot\n\n\nThose having a github account, please visit the repo and please give a star :)"
  },
  {
    "objectID": "posts/r-package-workflow.html",
    "href": "posts/r-package-workflow.html",
    "title": "R Package Development Workflow",
    "section": "",
    "text": "Here are the key devtools functions important in the R package development cycle.\n\nProject Setup\n\nusethis::create_package(): Creates a new package with the correct directory structure.\nusethis::use_git(): Initializes a Git repository for version control.\nusethis::use_r(): Creates a new .R file in the R/ directory.\n\n\n\n\nDevelopment and Documentation\n\ndevtools::load_all(): Loads all functions in the R/ directory, allowing you to quickly test them without installing the package.\ndevtools::document(): Generates documentation (.Rd files in the man/ directory) and the NAMESPACE file from roxygen2 comments.\ndevtools::install(): Installs the package from the source directory, making it available for use on your system.\n\n\n\n\nTesting and Checking\n\nusethis::use_testthat(): Sets up the testthat framework for unit testing.\nusethis::use_test(): Creates a new test file in tests/testthat/.\ndevtools::test(): Runs all the tests in the tests/testthat/ directory.\ndevtools::check(): Runs the comprehensive suite of R CMD check tests to identify errors, warnings, and notes.\ndevtools::check_win_devel(): Submits the package to the win-builder service to check for platform-specific issues on Windows.\n\n\n\n\nPublishing\n\nusethis::use_vignette(): Creates a new vignette (.Rmd file) for package tutorials.\npkgdown::build_site(): Builds a complete website for your package.\ndevtools::submit_cran(): Helps with the final steps of submitting your package to CRAN."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/phpdash/index.html",
    "href": "posts/phpdash/index.html",
    "title": "PHP dashboard from a MySQL database",
    "section": "",
    "text": "Let‚Äôs set up a LAMP stack on Pop!_OS and make a simple PHP dashboard from a MySQL database.\n\n\nüîπ Step 1: Install LAMP\nOpen a terminal and run:\n# Update package list\nsudo apt update\n\n# Install Apache\nsudo apt install apache2 -y\n\n# Install MySQL\nsudo apt install mysql-server -y\n\n# Secure MySQL (set root password, disable test DB, etc.)\nsudo mysql_secure_installation\n\n# Install PHP + common extensions\nsudo apt install php libapache2-mod-php php-mysql php-cli php-mbstring php-xml -y\nCheck versions:\napache2 -v\nphp -v\nmysql --version\nRestart services:\nsudo systemctl restart apache2\nsudo systemctl enable apache2\n\n\n\nüîπ Step 2: Set up Database\nEnter MySQL shell:\nsudo mysql\nCreate DB and table:\nCREATE DATABASE dashboard_db;\nUSE dashboard_db;\n\nCREATE TABLE stats (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(50),\n    value INT\n);\n\nINSERT INTO stats (name, value) VALUES\n('Users', 120),\n('Sales', 75),\n('Visitors', 300);\nExit MySQL:\nEXIT;\n\n\n\nüîπ Step 3: Set Web Root & Permissions\nDefault root is /var/www/html/.\nCreate a project folder:\nsudo mkdir /var/www/html/dashboard\nsudo chown -R $USER:$USER /var/www/html/dashboard\n\n\n\nüîπ Step 4: PHP Dashboard Script\nCreate index.php inside dashboard/:\n&lt;?php\n$host = \"localhost\";\n$user = \"root\"; // or your MySQL user\n$pass = \"\";     // set if you used one in mysql_secure_installation\n$db   = \"dashboard_db\";\n\n// Connect\n$conn = new mysqli($host, $user, $pass, $db);\n\n// Check\nif ($conn-&gt;connect_error) {\n    die(\"Connection failed: \" . $conn-&gt;connect_error);\n}\n\n// Fetch data\n$sql = \"SELECT name, value FROM stats\";\n$result = $conn-&gt;query($sql);\n?&gt;\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;My Dashboard&lt;/title&gt;\n    &lt;style&gt;\n        body { font-family: Arial, sans-serif; margin: 40px; }\n        .card { display: inline-block; margin: 20px; padding: 20px;\n                border-radius: 12px; box-shadow: 0 2px 5px rgba(0,0,0,0.2);\n                background: #f8f8f8; min-width: 120px; text-align: center; }\n        h2 { margin: 10px 0; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;üìä Simple PHP Dashboard&lt;/h1&gt;\n    &lt;?php while($row = $result-&gt;fetch_assoc()): ?&gt;\n        &lt;div class=\"card\"&gt;\n            &lt;h2&gt;&lt;?php echo $row['value']; ?&gt;&lt;/h2&gt;\n            &lt;p&gt;&lt;?php echo $row['name']; ?&gt;&lt;/p&gt;\n        &lt;/div&gt;\n    &lt;?php endwhile; ?&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n&lt;?php $conn-&gt;close(); ?&gt;\n\n\n\nüîπ Step 5: Test in Browser\nVisit: üëâ http://localhost/dashboard/\nYou should see 3 cards: Users, Sales, Visitors ‚Äî styled nicely.\n\n‚úÖ This is a short but comprehensive process:\n\nApache, MySQL, PHP installed\nDatabase + table created\nPHP script pulling live data into dashboard"
  },
  {
    "objectID": "posts/ielts-hyphenated-words.html",
    "href": "posts/ielts-hyphenated-words.html",
    "title": "Common hyphenated and non-hyphenated compound",
    "section": "",
    "text": "These compound words have hyphens between them.\n\ncheck-in\ncheck-out\nrunner-up\npasser-by\nself-esteem\nself-service\nself-employed\nfull-time\npart-time\nmother-in-law / father-in-law (rare in IELTS but useful to know)\nbrother-in-law / sister-in-law\nson-in-law / daughter-in-law (plural: sons-in-law, not son-in-laws)\npasser-by\neditor-in-chief\ncommander-in-chief\nwell-known\nwell-developed\nup-to-date\nstate-of-the-art\nhigh-quality\nlow-cost\nfirst-class\nlong-term\nshort-term\nuser-friendly\nenergy-efficient\ncost-effective\nstress-free\nhands-on\ntime-consuming\nEnglish-speaking (e.g., ‚Äúan English-speaking country‚Äù)\npart-time / full-time (when used as adjectives: ‚Äúa part-time job‚Äù)\nmiddle-aged\n\nThese are non-hyphenated words\n\nairport\narmchair\nbackyard\nbabysitter\nbackpack\nbasketball\nbathroom\nbeachball\nbedroom\nblackboard\nbluebird\nbodyguard\nbookcase\nbookmark\nbookshelf\nbrainstorm\ncampsite\ncarpool\nchildcare\nclassroom\ncookbook\ncourtyard\ncrosswalk\ncupcake\ndaycare\ndishwasher\ndoorbell\ndoorknob\ndownstairs\ndriveway\nearthquake\neyelid\nfingernail\nfingerprint\nfireman\nflashlight\nfootprint\nfootball\ngirlfriend\ngreenhouse\nhaircut\nhandshake\nhandmade\nhomework\nhouseplant\nhousework\niceberg\nkeyboard\nlaptop\nlipstick\nmailbox\nmilkshake\nmoonlight\nnotebook\noatmeal\npancake\nplayground\npopcorn\nraincoat\nrainbow\nshoelace\nskateboard\nsnowball\nsnowflake\nsnowman\nsoftball\nspaceship\nspotlight\nsuitcase\nsunflower\nsunlight\nsuperman\nswimming pool\ntablecloth\ntablespoon\nteardrop\ntoothbrush\ntoothpaste\nupstairs\nvolleyball\nwallpaper\nwatermelon\nweekend\nwheelchair\nwindbreaker\nwindmill\nworkshop"
  },
  {
    "objectID": "posts/spatio-temporal.html",
    "href": "posts/spatio-temporal.html",
    "title": "Spatio-temporal Analysis Workflow",
    "section": "",
    "text": "Spatio-temporal analysis sits right at the intersection of statistics, data science, GIS, and environmental applications.\nüìö Step 1: Build Foundations\nSpatial Statistics"
  },
  {
    "objectID": "posts/spatio-temporal.html#time-series-temporal-analysis",
    "href": "posts/spatio-temporal.html#time-series-temporal-analysis",
    "title": "Spatio-temporal Analysis Workflow",
    "section": "Time Series / Temporal Analysis",
    "text": "Time Series / Temporal Analysis\n\nRefresh time series models (ARIMA, state-space, spectral methods).\nAdd temporal clustering and forecasting methods."
  },
  {
    "objectID": "posts/spatio-temporal.html#spatio-temporal-models",
    "href": "posts/spatio-temporal.html#spatio-temporal-models",
    "title": "Spatio-temporal Analysis Workflow",
    "section": "Spatio-Temporal Models",
    "text": "Spatio-Temporal Models\n\nCombine both: spatio-temporal kriging, Gaussian random fields, Bayesian hierarchical models.\nBook: Hierarchical Modelling of Spatial Data Using R-INLA (Blangiardo & Cameletti).\n\nüõ† Step 2: Learn the Tools"
  },
  {
    "objectID": "posts/spatio-temporal.html#r-packages",
    "href": "posts/spatio-temporal.html#r-packages",
    "title": "Spatio-temporal Analysis Workflow",
    "section": "R packages",
    "text": "R packages\n\nsf (modern spatial objects)\nstars (spatio-temporal arrays)\nterra (raster/vector operations)\nspacetime (older but still used)\ngstat (variograms, kriging)\nspdep (spatial dependence)\nINLA (Bayesian spatio-temporal modeling)\nPython equivalents (optional, if you want dual skillset): geopandas, xarray, rasterio, pySTL, pysal, scikit-mobility\n\nüî¨ Step 3: Practice with Data"
  },
  {
    "objectID": "posts/spatio-temporal.html#sources-of-free-spatio-temporal-datasets",
    "href": "posts/spatio-temporal.html#sources-of-free-spatio-temporal-datasets",
    "title": "Spatio-temporal Analysis Workflow",
    "section": "Sources of free spatio-temporal datasets:",
    "text": "Sources of free spatio-temporal datasets:\n\nEarth observation: NASA EarthData, Copernicus (Sentinel satellites)\nClimate: ERA5 reanalysis (ECMWF)\nHealth: COVID-19 spatio-temporal data (Johns Hopkins)\nUrban/mobility: OpenStreetMap, Google Mobility Reports\nYou could start with simple projects:\nMapping air quality trends across time.\nSpatio-temporal spread of disease (e.g., dengue in Bangladesh).\nDetecting land cover change from satellite images.\n\nü§ù Step 4: Contribute"
  },
  {
    "objectID": "posts/spatio-temporal.html#open-source-contributions",
    "href": "posts/spatio-temporal.html#open-source-contributions",
    "title": "Spatio-temporal Analysis Workflow",
    "section": "Open-Source Contributions",
    "text": "Open-Source Contributions\n\nHelp improve documentation or examples in sf, stars, or spacetime.\nBuild teaching vignettes for gstat or spdep."
  },
  {
    "objectID": "posts/spatio-temporal.html#research-contributions",
    "href": "posts/spatio-temporal.html#research-contributions",
    "title": "Spatio-temporal Analysis Workflow",
    "section": "Research Contributions",
    "text": "Research Contributions\n\nApply spatio-temporal models to a new real-world problem (climate, urban growth, seismicity).\nPublish datasets + reproducible code (on GitHub + Zenodo)."
  },
  {
    "objectID": "posts/spatio-temporal.html#community-involvement",
    "href": "posts/spatio-temporal.html#community-involvement",
    "title": "Spatio-temporal Analysis Workflow",
    "section": "Community Involvement",
    "text": "Community Involvement\n\nJoin R-Spatial community (https://r-spatial.org).\nFollow Edzer Pebesma, Roger Bivand, and Virgilio G√≥mez-Rubio.\nPresent small case studies in workshops/webinars.\n\n‚ö° A good starting project for you could be:\n‚ÄúSpatio-temporal visualization of earthquake aftershocks in Bangladesh/Asia using USGS data‚Äù"
  },
  {
    "objectID": "posts/r-package-submission.html",
    "href": "posts/r-package-submission.html",
    "title": "CRAN Package Submission Checklist",
    "section": "",
    "text": "Before submitting your R package to CRAN, you should go through a thorough checklist to ensure it meets all the requirements. Failure to meet these standards will result in rejection. The submission process is a manual review, and reviewers are strict about the rules.\n\n\n1. Code Quality and Checks\n\nPass R CMD check --as-cran without any errors, warnings, or notes. This is the most critical step. Run this command from your package‚Äôs root directory. Address every single issue.\nNo Hardcoded Paths: Don‚Äôt use absolute paths like C:/Users/User/my_file.csv. Use system.file() to locate files within your package.\nNo Non-Standard Library Dependencies: Ensure you are not using libraries that are not on CRAN or Bioconductor.\nPackage Size: CRAN has a size limit, which is typically around 5 MB, though larger packages are sometimes accepted if they are well-justified. Use devtools::check_for_size()\n\n\n\n\n2. Documentation and Metadata\n\nDESCRIPTION File: Ensure this file is complete and accurate.\n\nVersion: The version number should be in the format A.B.C (e.g., 1.0.0).\nTitle: This should be concise and capitalized.\nDescription: A detailed, multi-sentence description of what your package does.\nLicense: Specify a valid open-source license, such as MIT or GPL-3.\nURL and BugReports: Include links to your GitHub repository or website.\nImports: List all packages your code uses.\nSuggests: List packages used in examples or vignettes but not essential for core functionality.\n\nman/ Directory: All functions must have a .Rd help file, and all function arguments should be documented. The examples in the help files should be runnable.\nVignettes: Include at least one vignette (.Rmd file in the vignettes/ directory) that provides a user-friendly introduction to your package‚Äôs main features.\nNEWS.md: A file documenting changes between versions is highly recommended.\nREADME File: A comprehensive README.md file in the package‚Äôs root directory is standard practice.\n\n\n\n\n3. User Experience and Best Practices\n\nInformative Error Messages: Your functions should provide clear, user-friendly error messages with stop() and warning() when things go wrong.\nAvoid Namespace Pollution: Use :: to call functions from other packages (e.g., ggplot2::ggplot()) unless a package is attached with library(). This prevents conflicts between functions with the same name.\nMinimal Dependencies: Only import packages you absolutely need to.\nUnit Tests: While not strictly required for a first submission, having a comprehensive suite of unit tests using testthat is highly recommended. They protect against regressions in future versions.\nData: If your package includes data, it should be placed in the data/ directory and documented with a .Rd file.\n\n\n\n\n4. Submission\n\ncran-checks: Check your package against the cran-checks GitHub action if you‚Äôve set it up.\ndevtools::submit_cran(): This function from the devtools package automates much of the submission process, including creating the submission email.\nMaintain Patience: The review process can take anywhere from a few days to several weeks. Be ready to respond to reviewer feedback and make necessary changes.\n\n\n\nHadley Recommendation\nThese are the major steps in the release process:\n\nDetermine the release type, which dictates the version number.\nIf the package is already on CRAN: Do due diligence on existing CRAN results. If this is a first release: confirm you are in compliance with CRAN policies.\nFreshen up documentation files, such as README.md and NEWS.md.\nDouble check() that your package is passing cleanly on multiple operating systems and on the released and development version of R.\nPerform reverse dependency checks, if other packages depend on yours.\nSubmit the package to CRAN and wait for acceptance.\nCreate a GitHub release and prepare for the next version by incrementing the version number.\nPublicize the new version."
  }
]